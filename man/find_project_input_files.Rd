% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_raw_portfolio_file.R
\name{find_project_input_files}
\alias{find_project_input_files}
\title{Find input files in a project}
\usage{
find_project_input_files(project, regexp = glue("{project}_Input[.]csv"),
  ...)
}
\arguments{
\item{project}{String giving the name of a project directory.}

\item{regexp}{A regular expression for match files in \code{project}.}

\item{...}{Arguments passed on to \code{fs::dir_ls}
\describe{
  \item{path}{A character vector of one or more paths.}
  \item{all}{If \code{TRUE} hidden files are also returned.}
  \item{recurse}{If \code{TRUE} recurse fully, if a positive number the number of levels
to recurse.}
  \item{type}{File type(s) to return, one or more of "any", "file", "directory",
"symlink", "FIFO", "socket", "character_device" or "block_device".}
  \item{glob}{A wildcard aka globbing pattern (e.g. \code{*.csv}) passed on to \code{\link[=grep]{grep()}} to filter paths.}
  \item{regexp}{A regular expression (e.g. \code{[.]csv$}) passed on to \code{\link[=grep]{grep()}} to filter paths.}
  \item{invert}{If \code{TRUE} return files which do \emph{not} match}
  \item{fail}{Should the call fail (the default) or warn if a file cannot be
accessed.}
  \item{recursive}{(Deprecated) If \code{TRUE} recurse fully.}
}}
}
\value{
A character vector
}
\description{
Find input files in a project
}
\examples{
find_project_input_files("TEST")

match_csv_files <- "TEST_Input[.]csv"
find_project_input_files("TEST", regexp = match_csv_files)
}
